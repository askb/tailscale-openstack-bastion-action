---
# SPDX-License-Identifier: Apache-2.0
# Test Bastion with Legacy Auth Key

name: Test Bastion with Legacy Auth Key

# yamllint disable-line rule:truthy
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      debug_mode:
        description: "Enable debug logging"
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BASTION_NAME: "test-authkey-bastion-${{ github.run_id }}"
  BASTION_WAIT_TIMEOUT: 300

jobs:
  test-authkey-bastion:
    name: Test Bastion with Auth Key
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Tailscale on Runner (Auth Key)
        uses: tailscale/github-action@aa604318b61e5b25107287e0d07db6a08b3e72c0 # v4.0.2
        with:
          authkey: ${{ secrets.TAILSCALE_AUTH_KEY }}
          hostname: test-authkey-runner-${{ github.run_id }}
          args: --ssh --accept-dns=false

      - name: Verify Runner Tailscale Connection
        run: |
          echo "=== Runner Tailscale Status ==="
          sudo tailscale status
          echo ""
          echo "Runner IPv4: $(sudo tailscale ip -4)"

      - name: Setup Bastion with Auth Key
        id: setup
        uses: ./
        with:
          operation: "setup"
          openstack_auth_url: ${{ secrets.OPENSTACK_AUTH_URL }}
          openstack_project_id: ${{ secrets.OPENSTACK_PROJECT_ID }}
          openstack_username: ${{ secrets.OPENSTACK_USERNAME }}
          openstack_password: ${{ secrets.OPENSTACK_PASSWORD_B64 }}
          openstack_region: ${{ secrets.OPENSTACK_REGION }}
          openstack_network_id: ${{ secrets.OPENSTACK_NETWORK_ID }}
          bastion_flavor: "v3-standard-2"
          bastion_image: "Ubuntu 22.04.5 LTS (x86_64) [2025-03-27]"
          bastion_network: "odlci"
          bastion_name: ${{ env.BASTION_NAME }}
          bastion_wait_timeout: ${{ env.BASTION_WAIT_TIMEOUT }}
          tailscale_auth_key: ${{ secrets.TAILSCALE_AUTH_KEY }}
          tailscale_tags: "tag:bastion"
          debug_mode: ${{ inputs.debug_mode || 'false' }}

      - name: Verify Bastion Setup
        run: |
          echo "=== Bastion Information ==="
          echo "Bastion IP: ${{ steps.setup.outputs.bastion_ip }}"
          echo "Bastion Name: ${{ steps.setup.outputs.bastion_name }}"

          if [ -z "${{ steps.setup.outputs.bastion_ip }}" ]; then
            echo "❌ ERROR: Bastion IP is empty"
            exit 1
          fi

          echo "✅ Bastion setup with auth key successful"

      - name: Test SSH Connectivity
        run: |
          BASTION_IP="${{ steps.setup.outputs.bastion_ip }}"

          if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
                 root@"${BASTION_IP}" "echo 'SSH connection successful'" 2>/dev/null; then
            echo "✅ SSH connection successful"
          else
            echo "❌ SSH connection failed"
            exit 1
          fi

      - name: Teardown Bastion
        if: always()
        uses: ./
        with:
          operation: "teardown"
          openstack_auth_url: ${{ secrets.OPENSTACK_AUTH_URL }}
          openstack_project_id: ${{ secrets.OPENSTACK_PROJECT_ID }}
          openstack_username: ${{ secrets.OPENSTACK_USERNAME }}
          openstack_password: ${{ secrets.OPENSTACK_PASSWORD_B64 }}
          openstack_region: ${{ secrets.OPENSTACK_REGION }}
          bastion_name: ${{ steps.setup.outputs.bastion_name }}
          debug_mode: ${{ inputs.debug_mode || 'false' }}

      - name: Generate Summary
        if: always()
        run: |
          {
            echo "## Legacy Auth Key Test Summary"
            echo ""
            echo "- **Bastion Name:** ${{ steps.setup.outputs.bastion_name }}"
            echo "- **Status:** ${{ job.status }}"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Result:** Auth key method works correctly" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ **Result:** Auth key method failed" >> "$GITHUB_STEP_SUMMARY"
          fi
